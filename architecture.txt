3 hazards of pipelining?;;Control<br>Data<br>Structural;
5 stages of a RISC pipeline?;;FETCH (adjust IP)<br>DECODE (read registers)<br>ALU<br>MEMORY ACCESS (store/load)<br>WRITE REGISTER;
5 steps of cc?;;Preprocessor, AST, codegen (to ASM), assemble (to object file), link (and mark executable).;
Advantages of dynamic linking?;;Dependencies can be updated without recompiling.<br>Less space.;
Bytecode vs object/machine code?;;Bytecode is executed by a virtual machine, which translates bytecode into machine instructions<br>Object/machine code is executed directly by processor;
Control hazard?;;Fetching the wrong inst after a conditional.<br>Solve with hardware: Intel neural net chip 98% accurate! MIPS: always execute inst after branch. Or software: branch prediction.;
Data hazard?;;Data can't flow backwards in time.<br>Solve with software: rearrange instruction to give you more time, hardware: read from interstage registers instead of register file.;
Dynamic linking vs static linking?;;Static: compile-time linking. ASM labels are replaced with addresses<br>Dynamic: run-time linking. Undefined symbols in symbol table are resolved by linker code in text section.;
Five sections of a program's virtual memory?;;Stack, text, data, kernel, IO, heap;
gdb: examine memory?;;x/20i $pc; string (s), chars (c), decimal (d), unsigned decimal (u), binary (t), address (a)<br>size letters: bytes (b), word (w) <br>can use negative #s, register addresses
gdb: p vs x?;;;p understands variables and how to print them<br>x just shows raw bytes at a location
gdb: read the stack trace at your current location<br>switch to a different frame;;bt<br>frame 1;("backtrace")
how do structs lay members out in memory?;;;by the member type alignment requirements (worst is pointers on x86: must start on address divisible by 64).
how should you arrange struct members to minimize chance of cache miss?;;;largest to smallest: largest types have strictest alignment requirements. check w sizeof().
Inspect sections of an object file?;;otool -tV a.out;
Runtime?;;Implicitly included when running certain languages. Contains GC code, stdlibs, etc. C doesn't have one.;
Structural hazard?;;Read register while it's being written. Solved by hardware magic.;
Symbol table advantages?;;Saves compile time. Without it, you'd have to recompile 50 C files when a symbol moves. This way, you only have to recompile your file and table.;
Unicode vs UTF-8?;;Unicode is the standard that defines the code points for most characters. UTF-8 is an encoding that uses 1-4 bytes per char.;
What is an interpreter?;;Parses code (or sometimes translates it into an intermediate representation), then executes immediately.;
Which sections of a program's VM have pointers?;;Stack (SP)<br>Text (PC/IP)<br>Data (GP)<br>Heap (HP);
