how do structs lay members out in memory?;;;by the member type alignment requirements (worst is pointers on x86: must start on address divisible by 64).

how should you arrange struct members to minimize chance of cache miss?;;;largest to smallest: largest types have strictest alignment requirements. check w sizeof().

gdb: examine memory?;;x/20i $pc; string (s), chars (c), decimal (d), unsigned decimal (u), binary (t), address (a)<br>size letters: bytes (b), word (w) <br>can use negative #s, register addresses

gdb: p vs x?;;;p understands variables and how to print them<br>x just shows raw bytes at a location

gdb: read the stack trace at your current location<br>switch to a different frame;;bt<br>frame 1;("backtrace")
